version: '3.8'

services:
  eraif:
    build: .
    container_name: eraif-emergency-connector
    ports:
      - "8080:8080"
      - "8443:8443"
      - "11112:11112"  # DICOM port
    volumes:
      - ./config.yml:/app/config.yml:ro
      - ./logs:/app/logs
      - ./data:/app/data
      - ./certs:/app/certs:ro
      - ./backups:/app/backups
    environment:
      - ERAIF_ENV=production
      - ERAIF_DATABASE_URL=postgresql://eraif:${POSTGRES_PASSWORD:-eraif_password}@postgres:5432/eraif
      - ERAIF_REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - eraif-network
    
  postgres:
    image: postgres:15-alpine
    container_name: eraif-postgres
    environment:
      - POSTGRES_DB=eraif
      - POSTGRES_USER=eraif
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-eraif_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U eraif -d eraif"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - eraif-network
    
  redis:
    image: redis:7-alpine
    container_name: eraif-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - eraif-network
    
  prometheus:
    image: prom/prometheus:latest
    container_name: eraif-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - eraif-network
    
  grafana:
    image: grafana/grafana:latest
    container_name: eraif-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - eraif-network
    
  nginx:
    image: nginx:alpine
    container_name: eraif-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - eraif
    restart: unless-stopped
    networks:
      - eraif-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  eraif-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16




